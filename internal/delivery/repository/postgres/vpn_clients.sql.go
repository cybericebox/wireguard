// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: vpn_clients.sql

package postgres

import (
	"context"
	"net/netip"

	"github.com/gofrs/uuid"
)

const createVpnClient = `-- name: CreateVpnClient :exec
insert into vpn_clients (user_id, group_id, ip_address, public_key, private_key, laboratory_cidr)
values ($1, $2, $3, $4, $5, $6)
`

type CreateVpnClientParams struct {
	UserID         uuid.UUID    `json:"user_id"`
	GroupID        uuid.UUID    `json:"group_id"`
	IpAddress      netip.Prefix `json:"ip_address"`
	PublicKey      string       `json:"public_key"`
	PrivateKey     string       `json:"private_key"`
	LaboratoryCidr netip.Prefix `json:"laboratory_cidr"`
}

func (q *Queries) CreateVpnClient(ctx context.Context, arg CreateVpnClientParams) error {
	_, err := q.db.Exec(ctx, createVpnClient,
		arg.UserID,
		arg.GroupID,
		arg.IpAddress,
		arg.PublicKey,
		arg.PrivateKey,
		arg.LaboratoryCidr,
	)
	return err
}

const deleteVPNClient = `-- name: DeleteVPNClient :exec
delete
from vpn_clients
where user_id = $1 and group_id = $2
`

type DeleteVPNClientParams struct {
	UserID  uuid.UUID `json:"user_id"`
	GroupID uuid.UUID `json:"group_id"`
}

func (q *Queries) DeleteVPNClient(ctx context.Context, arg DeleteVPNClientParams) error {
	_, err := q.db.Exec(ctx, deleteVPNClient, arg.UserID, arg.GroupID)
	return err
}

const deleteVPNClientsByGroupID = `-- name: DeleteVPNClientsByGroupID :exec
delete
from vpn_clients
where group_id = $1
`

func (q *Queries) DeleteVPNClientsByGroupID(ctx context.Context, groupID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteVPNClientsByGroupID, groupID)
	return err
}

const deleteVPNClientsByUserID = `-- name: DeleteVPNClientsByUserID :exec
delete
from vpn_clients
where user_id = $1
`

func (q *Queries) DeleteVPNClientsByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteVPNClientsByUserID, userID)
	return err
}

const getVPNClients = `-- name: GetVPNClients :many
select user_id,
       group_id,
       ip_address,
       public_key,
       private_key,
       laboratory_cidr,
       banned,
       updated_at,
       created_at
from vpn_clients
`

func (q *Queries) GetVPNClients(ctx context.Context) ([]VpnClient, error) {
	rows, err := q.db.Query(ctx, getVPNClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VpnClient{}
	for rows.Next() {
		var i VpnClient
		if err := rows.Scan(
			&i.UserID,
			&i.GroupID,
			&i.IpAddress,
			&i.PublicKey,
			&i.PrivateKey,
			&i.LaboratoryCidr,
			&i.Banned,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVPNClientBanStatus = `-- name: UpdateVPNClientBanStatus :exec
update vpn_clients
set banned = $3,
    updated_at = now()
where user_id = $1 and group_id = $2
`

type UpdateVPNClientBanStatusParams struct {
	UserID  uuid.UUID `json:"user_id"`
	GroupID uuid.UUID `json:"group_id"`
	Banned  bool      `json:"banned"`
}

func (q *Queries) UpdateVPNClientBanStatus(ctx context.Context, arg UpdateVPNClientBanStatusParams) error {
	_, err := q.db.Exec(ctx, updateVPNClientBanStatus, arg.UserID, arg.GroupID, arg.Banned)
	return err
}

const updateVPNClientBannedStatusByGroupID = `-- name: UpdateVPNClientBannedStatusByGroupID :exec
update vpn_clients
set banned = $2,
    updated_at = now()
where group_id = $1
`

type UpdateVPNClientBannedStatusByGroupIDParams struct {
	GroupID uuid.UUID `json:"group_id"`
	Banned  bool      `json:"banned"`
}

func (q *Queries) UpdateVPNClientBannedStatusByGroupID(ctx context.Context, arg UpdateVPNClientBannedStatusByGroupIDParams) error {
	_, err := q.db.Exec(ctx, updateVPNClientBannedStatusByGroupID, arg.GroupID, arg.Banned)
	return err
}

const updateVPNClientBannedStatusByUserID = `-- name: UpdateVPNClientBannedStatusByUserID :exec
update vpn_clients
set banned = $2,
    updated_at = now()
where user_id = $1
`

type UpdateVPNClientBannedStatusByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Banned bool      `json:"banned"`
}

func (q *Queries) UpdateVPNClientBannedStatusByUserID(ctx context.Context, arg UpdateVPNClientBannedStatusByUserIDParams) error {
	_, err := q.db.Exec(ctx, updateVPNClientBannedStatusByUserID, arg.UserID, arg.Banned)
	return err
}
