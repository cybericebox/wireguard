// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: vpn_clients.sql

package postgres

import (
	"context"

	"github.com/sqlc-dev/pqtype"
)

const createVpnClient = `-- name: CreateVpnClient :exec
insert into vpn_clients (id, ip_address, public_key, private_key, laboratory_cidr)
values ($1, $2, $3, $4, $5)
`

type CreateVpnClientParams struct {
	ID             string      `json:"id"`
	IpAddress      pqtype.Inet `json:"ip_address"`
	PublicKey      string      `json:"public_key"`
	PrivateKey     string      `json:"private_key"`
	LaboratoryCidr pqtype.Inet `json:"laboratory_cidr"`
}

func (q *Queries) CreateVpnClient(ctx context.Context, arg CreateVpnClientParams) error {
	_, err := q.exec(ctx, q.createVpnClientStmt, createVpnClient,
		arg.ID,
		arg.IpAddress,
		arg.PublicKey,
		arg.PrivateKey,
		arg.LaboratoryCidr,
	)
	return err
}

const deleteVPNClient = `-- name: DeleteVPNClient :exec
delete
from vpn_clients
where id = $1
`

func (q *Queries) DeleteVPNClient(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteVPNClientStmt, deleteVPNClient, id)
	return err
}

const getVPNClients = `-- name: GetVPNClients :many
select id,
       ip_address,
       public_key,
       private_key,
       laboratory_cidr,
       banned,
       updated_at,
       created_at
from vpn_clients
`

func (q *Queries) GetVPNClients(ctx context.Context) ([]VpnClient, error) {
	rows, err := q.query(ctx, q.getVPNClientsStmt, getVPNClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []VpnClient{}
	for rows.Next() {
		var i VpnClient
		if err := rows.Scan(
			&i.ID,
			&i.IpAddress,
			&i.PublicKey,
			&i.PrivateKey,
			&i.LaboratoryCidr,
			&i.Banned,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVPNClientBanStatus = `-- name: UpdateVPNClientBanStatus :exec
update vpn_clients
set banned = $2
where id = $1
`

type UpdateVPNClientBanStatusParams struct {
	ID     string `json:"id"`
	Banned bool   `json:"banned"`
}

func (q *Queries) UpdateVPNClientBanStatus(ctx context.Context, arg UpdateVPNClientBanStatusParams) error {
	_, err := q.exec(ctx, q.updateVPNClientBanStatusStmt, updateVPNClientBanStatus, arg.ID, arg.Banned)
	return err
}
