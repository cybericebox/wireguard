// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: wg.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Wireguard_Ping_FullMethodName            = "/wireguard.Wireguard/Ping"
	Wireguard_Monitoring_FullMethodName      = "/wireguard.Wireguard/Monitoring"
	Wireguard_GetClients_FullMethodName      = "/wireguard.Wireguard/GetClients"
	Wireguard_GetClientConfig_FullMethodName = "/wireguard.Wireguard/GetClientConfig"
	Wireguard_DeleteClients_FullMethodName   = "/wireguard.Wireguard/DeleteClients"
	Wireguard_BanClients_FullMethodName      = "/wireguard.Wireguard/BanClients"
	Wireguard_UnBanClients_FullMethodName    = "/wireguard.Wireguard/UnBanClients"
)

// WireguardClient is the client API for Wireguard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WireguardClient interface {
	// metrics
	Ping(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	Monitoring(ctx context.Context, opts ...grpc.CallOption) (Wireguard_MonitoringClient, error)
	GetClients(ctx context.Context, in *ClientsRequest, opts ...grpc.CallOption) (*ClientsResponse, error)
	GetClientConfig(ctx context.Context, in *ClientConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	DeleteClients(ctx context.Context, in *ClientsRequest, opts ...grpc.CallOption) (*ClientsAffectedResponse, error)
	BanClients(ctx context.Context, in *ClientsRequest, opts ...grpc.CallOption) (*ClientsAffectedResponse, error)
	UnBanClients(ctx context.Context, in *ClientsRequest, opts ...grpc.CallOption) (*ClientsAffectedResponse, error)
}

type wireguardClient struct {
	cc grpc.ClientConnInterface
}

func NewWireguardClient(cc grpc.ClientConnInterface) WireguardClient {
	return &wireguardClient{cc}
}

func (c *wireguardClient) Ping(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, Wireguard_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) Monitoring(ctx context.Context, opts ...grpc.CallOption) (Wireguard_MonitoringClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Wireguard_ServiceDesc.Streams[0], Wireguard_Monitoring_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &wireguardMonitoringClient{ClientStream: stream}
	return x, nil
}

type Wireguard_MonitoringClient interface {
	Send(*EmptyRequest) error
	Recv() (*MonitoringResponse, error)
	grpc.ClientStream
}

type wireguardMonitoringClient struct {
	grpc.ClientStream
}

func (x *wireguardMonitoringClient) Send(m *EmptyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wireguardMonitoringClient) Recv() (*MonitoringResponse, error) {
	m := new(MonitoringResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wireguardClient) GetClients(ctx context.Context, in *ClientsRequest, opts ...grpc.CallOption) (*ClientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientsResponse)
	err := c.cc.Invoke(ctx, Wireguard_GetClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) GetClientConfig(ctx context.Context, in *ClientConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, Wireguard_GetClientConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) DeleteClients(ctx context.Context, in *ClientsRequest, opts ...grpc.CallOption) (*ClientsAffectedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientsAffectedResponse)
	err := c.cc.Invoke(ctx, Wireguard_DeleteClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) BanClients(ctx context.Context, in *ClientsRequest, opts ...grpc.CallOption) (*ClientsAffectedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientsAffectedResponse)
	err := c.cc.Invoke(ctx, Wireguard_BanClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireguardClient) UnBanClients(ctx context.Context, in *ClientsRequest, opts ...grpc.CallOption) (*ClientsAffectedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientsAffectedResponse)
	err := c.cc.Invoke(ctx, Wireguard_UnBanClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WireguardServer is the server API for Wireguard service.
// All implementations must embed UnimplementedWireguardServer
// for forward compatibility
type WireguardServer interface {
	// metrics
	Ping(context.Context, *EmptyRequest) (*EmptyResponse, error)
	Monitoring(Wireguard_MonitoringServer) error
	GetClients(context.Context, *ClientsRequest) (*ClientsResponse, error)
	GetClientConfig(context.Context, *ClientConfigRequest) (*ConfigResponse, error)
	DeleteClients(context.Context, *ClientsRequest) (*ClientsAffectedResponse, error)
	BanClients(context.Context, *ClientsRequest) (*ClientsAffectedResponse, error)
	UnBanClients(context.Context, *ClientsRequest) (*ClientsAffectedResponse, error)
	mustEmbedUnimplementedWireguardServer()
}

// UnimplementedWireguardServer must be embedded to have forward compatible implementations.
type UnimplementedWireguardServer struct {
}

func (UnimplementedWireguardServer) Ping(context.Context, *EmptyRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWireguardServer) Monitoring(Wireguard_MonitoringServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitoring not implemented")
}
func (UnimplementedWireguardServer) GetClients(context.Context, *ClientsRequest) (*ClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (UnimplementedWireguardServer) GetClientConfig(context.Context, *ClientConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientConfig not implemented")
}
func (UnimplementedWireguardServer) DeleteClients(context.Context, *ClientsRequest) (*ClientsAffectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClients not implemented")
}
func (UnimplementedWireguardServer) BanClients(context.Context, *ClientsRequest) (*ClientsAffectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanClients not implemented")
}
func (UnimplementedWireguardServer) UnBanClients(context.Context, *ClientsRequest) (*ClientsAffectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBanClients not implemented")
}
func (UnimplementedWireguardServer) mustEmbedUnimplementedWireguardServer() {}

// UnsafeWireguardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WireguardServer will
// result in compilation errors.
type UnsafeWireguardServer interface {
	mustEmbedUnimplementedWireguardServer()
}

func RegisterWireguardServer(s grpc.ServiceRegistrar, srv WireguardServer) {
	s.RegisterService(&Wireguard_ServiceDesc, srv)
}

func _Wireguard_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).Ping(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_Monitoring_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WireguardServer).Monitoring(&wireguardMonitoringServer{ServerStream: stream})
}

type Wireguard_MonitoringServer interface {
	Send(*MonitoringResponse) error
	Recv() (*EmptyRequest, error)
	grpc.ServerStream
}

type wireguardMonitoringServer struct {
	grpc.ServerStream
}

func (x *wireguardMonitoringServer) Send(m *MonitoringResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wireguardMonitoringServer) Recv() (*EmptyRequest, error) {
	m := new(EmptyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Wireguard_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_GetClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).GetClients(ctx, req.(*ClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_GetClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).GetClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_GetClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).GetClientConfig(ctx, req.(*ClientConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_DeleteClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).DeleteClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_DeleteClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).DeleteClients(ctx, req.(*ClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_BanClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).BanClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_BanClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).BanClients(ctx, req.(*ClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wireguard_UnBanClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireguardServer).UnBanClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wireguard_UnBanClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireguardServer).UnBanClients(ctx, req.(*ClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wireguard_ServiceDesc is the grpc.ServiceDesc for Wireguard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wireguard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wireguard.Wireguard",
	HandlerType: (*WireguardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Wireguard_Ping_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _Wireguard_GetClients_Handler,
		},
		{
			MethodName: "GetClientConfig",
			Handler:    _Wireguard_GetClientConfig_Handler,
		},
		{
			MethodName: "DeleteClients",
			Handler:    _Wireguard_DeleteClients_Handler,
		},
		{
			MethodName: "BanClients",
			Handler:    _Wireguard_BanClients_Handler,
		},
		{
			MethodName: "UnBanClients",
			Handler:    _Wireguard_UnBanClients_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitoring",
			Handler:       _Wireguard_Monitoring_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wg.proto",
}
